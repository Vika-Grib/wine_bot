import sqlite3
import time

import requests
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove

from config import token, api_chat_gpt
import logging
import openpyxl
import parser_BeautifulSoup as pB
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


# Initialize bot and dispatcher
bot = Bot(token=token)
memory_storage = MemoryStorage()
dp = Dispatcher(bot, storage=memory_storage)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API-–∫–ª—é—á–∞ OpenAI
openai.api_key = api_chat_gpt


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT
def get_gpt_response(user_input):
    response = openai.Completion.create(
        engine="gpt-3.5-turbo-instruct",  # –í—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –¥–≤–∏–∂–æ–∫ GPT
        # engine="gpt-3.5-turbo-0125",  # –í—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –¥–≤–∏–∂–æ–∫ GPT
        prompt=user_input,
        max_tokens=500,
        temperature=0.7
    )
    return response.choices[0].text.strip()



def get_wine_names_from_api_vivino(url): # –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø–∞—Ä—Å–µ—Ä–∞
    response = requests.get(url)
    current_page_wines = response.json()['explore_vintage']['matches']
    wine_list = []

    for wine in current_page_wines:
        print(wine)
        name = wine['vintage']['seo_name'].replace('-', ' ')
        rating = wine['vintage']['statistics']['ratings_average']
        wine_info = f"{name} - Rating: {rating}"
        wine_list.append(wine_info)

    for wine_info in wine_list:
        print(wine_info)

    return wine_list

    #print(response.json()['explore_vintage']['matches'][1])
#get_wine_names_from_api_vivino('https://www.vivino.com/webapi/explore/explore?country_code=BY&currency_code=BYN&grape_filter=varietal&min_rating=1&order_by=ratings_average&order=desc&price_range_max=1000&price_range_min=0&wine_type_ids%5B%5D=1&wine_type_ids%5B%5D=2&wine_type_ids%5B%5D=3&wine_type_ids%5B%5D=4&wine_type_ids%5B%5D=24&wine_type_ids%5B%5D=7&page=1&language=en')



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL-–∞–¥—Ä–µ—Å–∞ –≤–∏–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def excel_paste(page_num, sheet):
    row_index = 2  # –ù–∞—á–Ω–µ–º —Å 2 —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤) (—á—Ç–æ–±—ã –∫–∞–∫–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –æ–±–Ω—É–ª—è–ª–∞—Å—å - –≤—ã–Ω–æ—Å–∏–º –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–µ–ª–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π, —á—Ç–æ–±—ã –æ–Ω–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª–∞—Å—å, –∞ –æ–ª–∏–Ω —Ä–∞–∑ –Ω–∞—á–∞–ª–∞ —Å 2 –∏ –¥–∞–ª—å—à–µ —É–≤ +1)
    list_of_wines = []
    # global row_index, list_of_wines
   # url = f'https://www.vivino.com/webapi/explore/explore?country_code=PL&currency_code=PLN&grape_filter=varietal&min_rating=1&order_by=ratings_average&order=desc&price_range_max=120&price_range_min=30&wine_type_ids%5B%5D=1&wine_type_ids%5B%5D=2&page={page_num}&language=en'
    url = f'https://www.vivino.com/webapi/explore/explore?country_code=PL&currency_code=PLN&grape_filter=varietal&order_by=price&order=asc&wine_type_ids%5B%5D=1&wine_type_ids%5B%5D=2&wine_type_ids%5B%5D=3&wine_type_ids%5B%5D=4&wine_type_ids%5B%5D=5&wine_type_ids%5B%5D=6&wine_type_ids%5B%5D=7&wine_type_ids%5B%5D=&wine_type_ids%5B%5D=24&page={page_num}&language=en'
    wine_names_and_ratings = get_wine_names_from_api_vivino(url)  # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –≤–∏–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API

    if wine_names_and_ratings:
        for wine_info in wine_names_and_ratings:
            wine_name, rating = wine_info.split(' - Rating: ') # —Ä–∞–∑–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–Ω–µ –Ω–∞ –∏–º—è –∏ —Ä–µ–π—Ç–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é .split(' - Rating: '), –∞ –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Ñ–∞–π–ª Excel
            if wine_name in list_of_wines:
                continue

            sheet.cell(row=row_index, column=1, value=wine_name)
            sheet.cell(row=row_index, column=2, value=rating)
            row_index += 1
            # print('new wine: ', wine_name)


def parser():
    list_of_wines = []

    file_name = 'wine_data.xlsx'
    start_page = 1
    last_page = 81
    # Excel –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
    workbook = openpyxl.load_workbook(file_name)  # –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–ª–∞—Å—å —Ç–∞–±–ª–∏—Ü–∞ –î–û –ø–∞—Ä—Å–µ—Ä–∞, –∞ –∑–∞–∫—Ä—ã–≤–∞–ª–∞—Å—å —É–∂–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–µ—Ä–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    sheet = workbook.active

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    sheet['A1'] = 'Wine Name'
    sheet['B1'] = 'Rating'

    column_A = sheet['A']
    for elem in range(len(column_A)):
        list_of_wines.append(column_A[elem].value) # value - –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏, –∞ –Ω–µ —Å–∞–º–∞ —è—á–µ–π–∫–∞

    row_index = len(list_of_wines) + 1  # –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤–∏–Ω–∞ –∏ –ø–æ—Å–ª–µ 2026
                                        # - —Å–ª–µ–¥—É—É—é—â–∏–µ –±—É–¥—É—Ç –¥–æ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —É–∂–µ –Ω–∞—á–∏–Ω–∞—è —Å 2027

    for page in range(start_page, last_page+1):
        excel_paste(page, sheet)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª Excel —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∏–Ω–∞—Ö
    workbook.save(file_name)
#parser()


# –ö–Ω–æ–ø–∫–∞ "Exit"
exit_button = KeyboardButton("Back to menu")
exit_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(exit_button)

class ConversationState(StatesGroup):
    conversation = State()


conn = sqlite3.connect('wine_database.db')
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç cursor, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏
cursor = conn.cursor()


# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
@dp.message_handler(text_contains='Back to menu', state='prepared_rating')
@dp.message_handler(text_contains='Back to menu', state='prepared_rating_list')
async def start(message: types.Message, state: FSMContext):
    try:
        cursor.execute(f'SELECT * FROM users WHERE user_id={message.from_user.id}') # —á—Ç–æ–±—ã –Ω–µ –ø–∑–∞–ø–∏—Å—ã–≤–∞–ª–æ –º–Ω–æ–≥–æ —Ä–∞–∑ –æ–¥–Ω–æ–≥–æ —á–µ–ª–∞
        user = list(cursor.fetchall())[0]
    except Exception as e:
        print(e)
        cursor.execute(f'''INSERT INTO users VALUES ({str(message.from_user.id)},'{str(message.from_user.username)}','','')''')
        conn.commit()
    user = message.from_user
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("Get Wine Rating")
    btn2 = types.KeyboardButton("All wine`s ratings from page")
    btn3 = types.KeyboardButton("Ask AI about wine")
    markup.row(btn1, btn2)
    markup.add(btn3)
    await bot.send_message(chat_id=message.from_user.id, text=f"Hello, {message.from_user.first_name}!\nI`m bot. I`m here to help you to find out wine rating and answer questions about wine.", reply_markup=markup)
    # Please send me the URL of a wine page.



@dp.message_handler(commands=['admin'])
@dp.callback_query_handler(text_contains="admin_menu")
async def admin(message: types.Message, state: FSMContext):
    a = types.ReplyKeyboardRemove()
    await bot.send_message(chat_id=message.from_user.id, text='–£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏...', reply_markup=a)
    time.sleep(1) # –Ω–∞ 1 —Å–µ–∫ –æ–Ω –∑–∞—Å—ã–ø–∞–µ—Ç / –∑–∞–≤–∏—Å–Ω–µ—Ç
    cursor.execute('''SELECT * FROM users''')  # –º—ã –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω—É–∂–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ - –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ - –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    all_users = cursor.fetchall()
    users_count = len(all_users)
    #print(all_users)
    markup = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list")
    btn2 = types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data="broadcast_all")
    markup.add(btn1, btn2)
    await bot.send_message(chat_id=message.from_user.id, text=f'''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –ê–î–ú–ò–ù–ö–ï
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}''', reply_markup=markup)


@dp.callback_query_handler(text_contains= "user_list")
async def user_list(callback_query: types.CallbackQuery, state: FSMContext):
    cursor.execute('''SELECT * FROM users''')  # –º—ã –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω—É–∂–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ - –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ - –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    all_users = cursor.fetchall()
    answer = ""  # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    for user in all_users:
        user_id = user[0]
        user_name = user[1]
        answer += f'''{user_id} | @{user_name}\n'''
    markup = types.InlineKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏", callback_data="admin_menu")
    markup.add(btn1)
    await bot.send_message(chat_id=callback_query.from_user.id, text=answer, reply_markup=markup)


# Command handler to start broadcasting custom information
@dp.callback_query_handler(text_contains="broadcast_all")
async def cmd_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    # üëãüñ•üîêüíºüåêüìùüí≥üíµ‚úÖüì©üîóüí∞‚öñÔ∏èüíªü§µ‚öôÔ∏èüåá‚è∞‚ö†Ô∏èüì• üì§ üíå ‚óÄÔ∏è‚úèÔ∏èüìåüñä ‚ùóÔ∏è ‚ùåüîô
    pay_button = types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_menu")
    keyboard.add(pay_button)
    await bot.send_message(chat_id=callback_query.from_user.id, text=f'''
‚ÄºÔ∏è –ë–æ—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏!
üñº –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–ù–µ –±–æ–ª–µ–µ 10 —Ñ–æ—Ç–æ) !
üìÑ –ü–æ—Å–ª–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏.''', reply_markup=keyboard)
    await state.set_state('wait_for_photo')


@dp.message_handler(content_types=['photo'], state="wait_for_photo")
async def photo_handler(message: types.Message, state: FSMContext):
    # we are here if the first message.content_type == 'photo'
    # save the largest photo (message.photo[-1]) in FSM, and start photo_counter
    await state.update_data(photo_0=message.photo[-1].file_id, photo_counter=0, text='')
    await state.set_state('next_photo')

@dp.message_handler(content_types=['photo'], state='next_photo')
async def next_photo_handler(message: types.Message, state: FSMContext):
    # we are here if the second and next messages are photos
    async with state.proxy() as data:
        data['photo_counter'] += 1
        if data['photo_counter'] == 1:
            await bot.send_message(chat_id=message.from_user.id, text=f'''
üñº –ü—Ä–∏—à–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ !
‚ÄºÔ∏è–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Å—ã–ª–∫–∏ –≤–∞—à–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞.''')
        photo_counter = data['photo_counter']
        data[f'photo_{photo_counter}'] = message.photo[-1].file_id

    await state.set_state('next_photo')

# üëãüñ•üîêüíºüåêüìùüí≥üíµ‚úÖüì©üîóüí∞‚öñÔ∏èüíªü§µ
@dp.message_handler(content_types=["text"], state='next_photo')
async def not_foto_handler(message: types.Message, state: FSMContext):
    # we are here if the second and next messages are not photos
    ad_text = message.text
    async with state.proxy() as data:
        data['text'] = ad_text

        await bot.send_message(chat_id=message.from_user.id, text='''
–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:
("-" –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å)''')
        await state.set_state("url")


@dp.message_handler(content_types=["text"], state='url')
async def not_foto_handler(message: types.Message, state: FSMContext):
    # we are here if the second and next messages are not photos
    url = message.text

    async with state.proxy() as data:
        ad_text = data['text']
        # here we do something with data dictionary with all photos
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        pay_button4 = types.InlineKeyboardButton(text="üåê –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞ üåê", callback_data="admin_menu")
        keyboard.add(pay_button4)
        await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –í–∞—à–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑–æ—Å–ª–∞–Ω–∞!', reply_markup=keyboard)
        await broadcast_custom_information(ad_text, data, url)


async def broadcast_custom_information(message_to_broadcast, photos_ids, url):
    all_users_ids = []
    try:
        # Retrieve a list of users who interacted with the bot
        cursor.execute(f'''Select * from users ''')
        all_users = list(cursor.fetchall())

        for user in all_users:
            if user[0] != 0:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤—Ä—É—á–Ω—É—é –∑–∞–ø–∏—Å—å —Å id
                all_users_ids.append(user[0])

    except Exception as e:
        logging.exception(f"Failed to get all users: {e}")  # –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏ - –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞ –æ–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª–∏–∫ .log, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ª—é–±—ã–µ –ª–æ–≥–∏, –≤—ã–≤–æ–¥—ã

    logging.info(f"Total {len(all_users_ids)} users found")

    media = types.MediaGroup() # —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ —Ñ–æ—Ç–æ
    photos_ids = list(photos_ids.values())[:1] + list(photos_ids.values())[3:]
    if url == "-":
        for i in range(len(photos_ids)):
            # print(photos_ids[i])
            if i == 0:
                media.attach_photo(types.InputMediaPhoto(photos_ids[i], caption=message_to_broadcast))  # attach_photo - –∫–æ–≥–¥–∞ id = 0, —Ç.–µ. –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ, –º—ã –¥–æ–± –ø–æ–¥–ø–∏—Å—å –Ω–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º
            else:
                media.attach_photo(types.InputMediaPhoto(photos_ids[i]))
        # Send the custom information message to all users
        for user_id in all_users_ids:
            try:
                await bot.send_media_group(chat_id=user_id, media=media)  # –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            except Exception as e:
                print(e)
                if "bot was blocked by the user" in str(e):
                    cursor.execute(f'''UPDATE users SET blocked = "Yes" WHERE user_Id={user_id}''')
                    logging.exception(f"Failed to send message to user {user_id}: {e}")
    else:
        for i in range(len(photos_ids)):
            if i == 0:
                media.attach_photo(types.InputMediaPhoto(photos_ids[i]))
            else:
                media.attach_photo(types.InputMediaPhoto(photos_ids[i]))
        # Send the custom information message to all users
        for user_id in all_users_ids:
            try:
                await bot.send_media_group(chat_id=user_id, media=media)
                # await bot.send_media_group(chat_id=user_id, media=params)
            except Exception as e:
                print(e)
                if "bot was blocked by the user" in str(e):
                    cursor.execute(f'''UPDATE users SET blocked = "Yes" WHERE user_Id={user_id}''')
                    logging.exception(f"Failed to send message to user {user_id}: {e}")

                logging.exception(f"Failed to send message to user {user_id}: {e}")
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            pay_button1 = types.InlineKeyboardButton(text="–ü–ï–†–ï–ô–¢–ò", url=str(url))
            keyboard.add(pay_button1)
            await bot.send_message(chat_id=user_id, text=message_to_broadcast, reply_markup=keyboard)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "Ask AI about wine"
@dp.message_handler(text_contains='Ask AI about wine')
async def process_message(message: types.Message, state: FSMContext):
    await message.answer('Welcome! Feel free to ask me anything about wine.')
    await ConversationState.conversation.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "conversation"
@dp.message_handler(content_types=['text'], state=ConversationState.conversation)
async def process_message(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "Exit"
    if message.text == "Back to menu":
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = types.KeyboardButton("Get Wine Rating")
        btn2 = types.KeyboardButton("All wine`s ratings from page")
        btn3 = types.KeyboardButton("Ask AI about wine")
        markup.row(btn1, btn2)
        markup.add(btn3)
        cursor.execute(f'''UPDATE users SET theme='' WHERE user_id = {message.from_user.id}''')
        conn.commit()
        cursor.execute(f'''UPDATE users SET main_idea='' WHERE user_id = {message.from_user.id}''')
        conn.commit()
        await message.answer('Exiting conversation. Feel free to start a new one anytime!',
                             reply_markup=markup)
        await message.answer('–ü–∏—à–µ–º –∫–∞–∫–æ–µ-—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ —Ç—ã–∫–∞—Ç—å –ø–æ –∫–Ω–æ–ø–æ—á–∫–∞–º!')
        await state.finish()
        return


    else:
        cursor.execute(f'''Select * from users WHERE user_id={message.from_user.id}''')
        user = list(cursor.fetchall())[0]
        theme = user[2]
        main_idea = user[3]
        if theme == '' and main_idea == '':
            first_gpt_response = get_gpt_response(message.text)
            print(first_gpt_response, '1_GPT_RESPONSE!!!!')
            await message.answer(first_gpt_response.strip(), reply_markup=exit_markup)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç gpt –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            gpt_response = get_gpt_response(f'''
–í—ã–¥–µ–ª–∏ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –∑–∞—Ç–µ–º –∫—Ä–∞—Ç–∫–æ –∑–∞–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å.
–ü—Ä–∏–º–µ—Ä:
–ù–∞—á–∞—Ç—å –ø—Ä–æ–±–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–µ —Å—É–ø–µ—Ä–≤–∏–Ω–∞ –º–æ–∂–Ω–æ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –≤–∏–Ω, —Ç–∞–∫–∏—Ö –∫–∞–∫ –®–∞—Ç–æ –õ–∞—Ç—É—Ä –∏–ª–∏ –®–∞—Ç–æ –ú–∞—Ä–≥–æ, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏—Ö –≤–∏–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–∞—Ä–æ–ª–æ –∏–ª–∏ –ë—Ä—É–Ω–µ–ª–ª–æ –¥–∏ –ú–æ–Ω—Ç–∞–ª—å—á–∏–Ω–æ, –∞—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∏—Ö –≤–∏–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–ª–±–µ–∫ –∏–ª–∏ –ö–∞–±–µ—Ä–Ω–µ –°–æ–≤–∏–Ω—å–æ–Ω, –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤, –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–≤–æ–∏–º–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫—Ä–∞—Å–Ω—ã–º–∏ –≤–∏–Ω–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ù–∞–ø–∞ –í—ç–ª–ª–∏ –≤ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –∏–ª–∏ –ë–æ—Ä–¥–æ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏.

–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
–¢–µ–º–∞: –∫—Ä–∞—Å–Ω—ã–µ —Å—É–ø–µ—Ä–≤–∏–Ω–∞.
–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å: –®–∞—Ç–æ –õ–∞—Ç—É—Ä, –®–∞—Ç–æ –ú–∞—Ä–≥–æ, –ë–∞—Ä–æ–ª–æ, –ë—Ä—É–Ω–µ–ª–ª–æ –¥–∏ –ú–æ–Ω—Ç–∞–ª—å—á–∏–Ω–æ, –ú–∞–ª–±–µ–∫, –ö–∞–±–µ—Ä–Ω–µ –°–æ–≤–∏–Ω—å–æ–Ω, –ù–∞–ø–∞ –í—ç–ª–ª–∏ - –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è, –ë–æ—Ä–¥–æ - –§—Ä–∞–Ω—Ü–∏—è.

[{first_gpt_response}]
''')
            gpt_theme = gpt_response.split('–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:')[0].replace('–¢–µ–º–∞:', '').strip()
            gpt_main_idea = gpt_response.split('–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:')[1].strip()
            theme = gpt_theme
            main_idea = gpt_main_idea
            cursor.execute(f'''UPDATE users SET theme='{theme}' WHERE user_id = {message.from_user.id}''')
            conn.commit()
            cursor.execute(f'''UPDATE users SET main_idea='{main_idea}' WHERE user_id = {message.from_user.id}''')
            conn.commit()

        else:
            context = f'''
–î–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è". –û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å –≤–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ "–ö–æ–Ω—Ç–µ–∫—Å—Ç".
–ö–æ–Ω—Ç–µ–∫—Å—Ç: 
–¢–µ–º–∞: {theme}
–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}
–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 
{message.text}
'''
            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ GPT
            next_gpt_response = get_gpt_response(context)
            await message.answer(next_gpt_response.strip(), reply_markup=exit_markup)
            gpt_response = get_gpt_response(f'''
–í—ã–¥–µ–ª–∏ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –∑–∞—Ç–µ–º –∫—Ä–∞—Ç–∫–æ –∑–∞–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å.
–ü—Ä–∏–º–µ—Ä:
–ù–∞—á–∞—Ç—å –ø—Ä–æ–±–æ–≤–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–µ —Å—É–ø–µ—Ä–≤–∏–Ω–∞ –º–æ–∂–Ω–æ —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –≤–∏–Ω, —Ç–∞–∫–∏—Ö –∫–∞–∫ –®–∞—Ç–æ –õ–∞—Ç—É—Ä –∏–ª–∏ –®–∞—Ç–æ –ú–∞—Ä–≥–æ, –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏—Ö –≤–∏–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–∞—Ä–æ–ª–æ –∏–ª–∏ –ë—Ä—É–Ω–µ–ª–ª–æ –¥–∏ –ú–æ–Ω—Ç–∞–ª—å—á–∏–Ω–æ, –∞—Ä–≥–µ–Ω—Ç–∏–Ω—Å–∫–∏—Ö –≤–∏–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–ª–±–µ–∫ –∏–ª–∏ –ö–∞–±–µ—Ä–Ω–µ –°–æ–≤–∏–Ω—å–æ–Ω, –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤, –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–≤–æ–∏–º–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫—Ä–∞—Å–Ω—ã–º–∏ –≤–∏–Ω–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ù–∞–ø–∞ –í—ç–ª–ª–∏ –≤ –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –∏–ª–∏ –ë–æ—Ä–¥–æ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏.

–¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
–¢–µ–º–∞: –∫—Ä–∞—Å–Ω—ã–µ —Å—É–ø–µ—Ä–≤–∏–Ω–∞.
–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å: –®–∞—Ç–æ –õ–∞—Ç—É—Ä, –®–∞—Ç–æ –ú–∞—Ä–≥–æ, –ë–∞—Ä–æ–ª–æ, –ë—Ä—É–Ω–µ–ª–ª–æ –¥–∏ –ú–æ–Ω—Ç–∞–ª—å—á–∏–Ω–æ, –ú–∞–ª–±–µ–∫, –ö–∞–±–µ—Ä–Ω–µ –°–æ–≤–∏–Ω—å–æ–Ω, –ù–∞–ø–∞ –í—ç–ª–ª–∏ - –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏—è, –ë–æ—Ä–¥–æ - –§—Ä–∞–Ω—Ü–∏—è.

[{next_gpt_response}]
''')
            print(next_gpt_response)
            gpt_theme = gpt_response.split('–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:')[0].replace('–¢–µ–º–∞:', '').strip()
            gpt_main_idea = gpt_response.split('–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:')[1].strip()
            theme += ' + ' + gpt_theme
            main_idea += ' + ' + gpt_main_idea
            cursor.execute(f'''UPDATE users SET theme='{theme}' WHERE user_id = {message.from_user.id}''')
            conn.commit()
            cursor.execute(f'''UPDATE users SET main_idea='{main_idea}' WHERE user_id = {message.from_user.id}''')
            conn.commit()
            print(gpt_response, "!!!!!")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await state.reset_state()

        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ —Å–Ω–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "conversation"
    await ConversationState.conversation.set()


# @dp.message_handler(text_contains='Ask AI about wine')  # —ç—Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏
# async def process_message(message: types.Message, state: FSMContext):
#     await bot.send_message(chat_id=message.from_user.id, text='Welcome! Feel free to ask me anything about wine.')
#     await state.set_state('conversation')  # –æ–∂–∏–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ –Ω–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è

# @dp.message_handler(content_types=['text'], state='conversation')  # –∞ —ç—Ç–æ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–æ —Å—Ç–µ–π—Ç—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞
# async def process_message(message: types.Message, state: FSMContext): # —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞–∑—ã–≤–∞–µ–º–æ–µ "proxy" (–ø–æ—Å—Ä–µ–¥–Ω–∏–∫), —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
#     async with state.proxy() as data:
#         user_input = data.get("user_input", "")
#         user_input += f" {message.text}"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
#
#         # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ GPT
#         gpt_response = get_gpt_response(user_input)
#
#         await bot.send_message(chat_id=message.from_user.id, text=gpt_response.strip())
#         # # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         # await state.reset_state()
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
#         data["user_input"] = user_input
#     # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ—Å–µ–¥—É
#     await state.finish()

    # prompt = message.text
    # gpt_response = get_gpt_response(prompt)  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    # await bot.send_message(chat_id=message.from_user.id, text=gpt_response)
    # await state.finish()


@dp.message_handler(text_contains='Get Wine Rating')
async def process_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text='Please send me the name of a wine for rating.', reply_markup=exit_markup)
    await state.set_state('prepared_rating')  # –æ–∂–∏–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ –Ω–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è


@dp.message_handler(content_types=['text'], state='prepared_rating')
async def process_message(message: types.Message, state: FSMContext):
    cursor.execute(f'''Select * from wine_ratings''')
    wine_ratings = list(cursor.fetchall())
    user_wine = message.text # —Ç–æ —á—Ç–æ –≤–≤–æ–¥–∏—Ç —é–∑–µ—Ä - –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–Ω–∞
    for wine_rating in wine_ratings:
        if user_wine.lower() in wine_rating[0].lower(): # —Ç—É—Ç –º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ –∏–º—è [0] —á—Ç–æ–±—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            await bot.send_message(chat_id=message.from_user.id, text=wine_rating[1])
            break
        # print('–°–†–ê–í–ù–ò–¢–¨!', wine_rating[0], user_wine)
    await state.finish()


@dp.message_handler(text_contains='All wine`s ratings from page')
async def process_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text='Please send me the URL of a wine page.', reply_markup=exit_markup)
    await state.set_state('prepared_rating_list')  # –æ–∂–∏–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ –Ω–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è


@dp.message_handler(content_types=['text'], state='prepared_rating_list')
async def process_message(message: types.Message, state: FSMContext):
    user_url = message.text
    if user_url.startswith('http'):
        # —á—Ç–æ–±—ã –∑–∞–ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç
        await state.update_data(user_url=user_url)
        await bot.send_message(chat_id=message.from_user.id, text='Great! Now, please copy as it`s named on page and send it to me.')
        await state.set_state('completed_request')  # –æ–∂–∏–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –∏ –Ω–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
    else:
        await bot.send_message(chat_id=message.from_user.id, text="Please send valid URL.")


@dp.message_handler(content_types=['text'], state='completed_request')
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:  # –ø—Ä–∏ –ø–æ–º–æ—â–∏ state.proxy() as data –¥–æ—Å—Ç–∞–ª–∏ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ data
        user_url = data["user_url"]  # –¥–æ—Å—Ç–∞–µ–º –∏–∑ data –Ω–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if user_url.startswith('http'):
        wine_class_name = pB.get_wine_class_name(message, user_url)
        # print("wcm: ", wine_class_name)
        wine_page_list = pB.collect_wine_names(user_url, wine_class_name)
        rating_page_list = []
        for wine in wine_page_list:
            rating_page_list.append(pB.get_vivino_rating(wine))
        response = pB.generate_response(wine_page_list, rating_page_list)
        await bot.send_message(chat_id=message.from_user.id, text=response)
        await state.finish()  # –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å—Ç–µ–π—Ç, —á—Ç–æ–±—ã –æ–Ω —Å–±—Ä–æ—Å–∏–ª—Å—è
    else:
        await bot.send_message(chat_id=message.from_user.id, text="Please send valid URL.")
        await state.set_state('prepared_rating_list')


# Run the bot
if __name__ == '__main__':
    from aiogram import executor
    # print(get_gpt_response(input()))
    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∂—É—Ä–Ω–∞–ª–∞
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        level=logging.INFO)
    # logging.info('Starting the bot...')
    executor.start_polling(dp, skip_updates=True)



